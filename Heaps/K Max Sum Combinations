#include<bits/stdc++.h>

vector<int> kMaxSumCombination(vector<int> &A, vector<int> &B, int n, int C) {
   
    sort(A.begin(), A.end());
    sort(B.begin(), B.end());
    
    priority_queue<pair<int, pair<int, int>>> pq; // A[i]+B[j], <i, j>
    set<pair<int, int>> s; // i, j

    pq.push(make_pair(A[n-1]+B[n-1],make_pair(n-1,n-1)));
    s.insert(make_pair(n-1,n-1));
    
    vector<int>ans;
    
    while(C--)
    {
        auto p= pq.top();
        pq.pop();
        ans.push_back(p.first);

        int l= p.second.first;
        int r= p.second.second;

        if(l>0 && r>0 && s.find(make_pair(l-1,r))== s.end())
        {
            pq.push(make_pair(A[l-1]+B[r], make_pair(l-1,r)));
            s.insert(make_pair(l-1,r));
        }
        if(l>0 && r>0 && s.find(make_pair(l,r-1))== s.end())
        {
            pq.push(make_pair(A[l]+B[r-1], make_pair(l,r-1)));
            s.insert(make_pair(l,r-1));
        }
    }
    
    return ans;
}
